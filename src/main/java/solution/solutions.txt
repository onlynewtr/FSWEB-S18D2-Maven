Biyografi türünü tür tablosuna ekleyin:
INSERT INTO public.tur(ad) VALUES('Biyografi');

Nurettin Belek isimli yazarı yazar tablosuna ekleyin:
INSERT INTO public.yazar(ad, soyad) VALUES('Nurettin', 'Belek');

10B sınıfındaki öğrencileri 10C sınıfına geçirin:
UPDATE public.ogrenci SET sinif = '10C' WHERE sinif = '10B';

Tüm kitapların puanını 5 puan arttırın:
UPDATE public.kitap SET puan = puan + 5;

Adı Mehmet olan tüm yazarları silin:
DELETE FROM public.yazar WHERE ad = 'Mehmet';


Kişisel Gelişim isimli bir tür oluşturun:
INSERT INTO public.tur(ad) VALUES('Kişisel Gelişim');

'Benim Üniversitelerim' isimli kitabın türünü 'Kişisel Gelişim' yapın:
UPDATE public.kitap SET turno = (SELECT turno FROM public.tur WHERE ad = 'Kişisel Gelişim')
WHERE ad = 'Benim Üniversitelerim';

Öğrenci tablosunu kontrol etmek amaçlı tüm öğrencileri görüntüleyen "ogrencilistesi" adında bir fonksiyon oluşturun:
CREATE OR REPLACE FUNCTION ogrencilistesi() RETURNS TABLE(ogrno bigint, ad varchar, soyad varchar, cinsiyet varchar, sinif varchar, puan integer, dtarih varchar) AS $$
BEGIN
    RETURN QUERY SELECT * FROM public.ogrenci;
END; $$
LANGUAGE plpgsql;


kitap tablosuna yeni kitap eklemek için "ekle" adında bir prosedür oluşturun:
CREATE OR REPLACE PROCEDURE ekle(ad VARCHAR, puan INTEGER, yazarno BIGINT, turno BIGINT)
LANGUAGE plpgsql AS $$
BEGIN
    INSERT INTO public.kitap(ad, puan, yazarno, turno) VALUES (ad, puan, yazarno, turno);
END; $$


Öğrenci noya göre öğrenci silebilmeyi sağlayan "sil" adında bir prosedür oluşturun:
CREATE OR REPLACE PROCEDURE sil(ogrno BIGINT)
LANGUAGE plpgsql AS $$
BEGIN
    DELETE FROM public.ogrenci WHERE ogrno = ogrno;
END; $$